{"version":3,"file":"index_js.bootstrap.js","mappings":";;;;;;;;;;;AAAmF;;AAEnF;AACA;AACA;;AAEA;AACA,mEAAmE,iBAAiB;AACpF;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,SAAS,KAAK,WAAW;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6DAAa;AACrC;AACA;AACA;AACA;AACA,sBAAsB,2DAAW;AACjC,IAAI,qEAAiB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA,KAAK;AACL,CAAC;;;AAGD;AACA,+CAA+C,cAAc;AAC7D;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,MAAM;;AAErC;AACA,CAAC;;AAED;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FqD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAErD;;AAEA;;AAEA,0BAA0B;;AAE1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,oDAAoD,8BAA8B;;AAElF;;AAEA;;AAEA;AACA;AACA,4CAA4C,+DAAW;AACvD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,WAAW,cAAc;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4CAA4C,+DAAW;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS,IAAI,YAAY,IAAI,UAAU;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0BAA0B;AACpC,UAAU,aAAa;AACvB,UAAU,QAAQ;AAClB;AACO;AACP;AACA,uBAAuB,wFAAoC;AAC3D;AACA,6CAA6C,0EAAsB,EAAE,2EAAuB;AAC5F;AACA,QAAQ,0EAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,QAAQ,wFAAoC;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN,QAAQ,6EAAyB;AACjC;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,+EAA2B;AACnC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,oFAAgC;AACpD;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,oFAAgC;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,0FAAsC;AAC1D;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA,QAAQ,0FAAsC;AAC9C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,6FAAyC;AAC7D;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,QAAQ,6FAAyC;AACjD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,4FAAwC;AAC5D;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,QAAQ,4FAAwC;AAChD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,6FAAyC;AAC7D;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,QAAQ,6FAAyC;AACjD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,wFAAoC;AACxD;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA,QAAQ,wFAAoC;AAC5C;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAoB;AACxC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,iFAA6B;AACrC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,8FAA0C;AAC9D;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,8FAA0C;AAClD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,iGAA6C;AACjE;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,iGAA6C;AACrD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,yGAAqD;AACzE;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,yGAAqD;AAC7D;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,wGAAoD;AACxE;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,wGAAoD;AAC5D;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,+FAA2C;AAC/D;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,+FAA2C;AACnD;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA,oBAAoB,0EAAsB;AAC1C;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA,4DAA4D,0EAAsB,EAAE,2EAAuB;AAC3G;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA,wCAAwC,0EAAsB,EAAE,2EAAuB;AACvF;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,MAAM;AACN,QAAQ,wEAAoB;AAC5B;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO,6CAA6C;AACpD;AACA,CAAC;;AAEM,gDAAgD;AACvD;AACA;AACA,CAAC;;AAEM;AACP;AACA;AACA;;AAEO;AACP;AACA,wCAAwC,0EAAsB,EAAE,2EAAuB;AACvF;AACA;AACA;AACA;;AAEO;AACP;AACA","sources":["webpack://textwrap-wasm-demo-app/./index.js","webpack://textwrap-wasm-demo-app/../pkg/textwrap_wasm_demo.js","webpack://textwrap-wasm-demo-app/../pkg/textwrap_wasm_demo_bg.js"],"sourcesContent":["import { draw_wrapped_text, WasmOptions, WasmPenalties } from \"textwrap-wasm-demo\";\n\nfetch(\"build-info.json\").then(response => response.json()).then(buildInfo => {\n    if (buildInfo.date && buildInfo.commit) {\n        document.getElementById(\"build-date\").innerText = buildInfo.date;\n\n        let link = document.createElement(\"a\");\n        link.href = `https://github.com/mgeisler/textwrap/commit/${buildInfo.commit}`;\n        link.innerText = buildInfo.commit.slice(0, 7);\n        document.getElementById(\"build-commit\").replaceWith(link);\n    }\n})\n\nfunction redraw(event) {\n    let fontSize = document.getElementById(\"font-size\").valueAsNumber;\n    let fontFamily = document.getElementById(\"font-family\").value;\n    let canvas = document.getElementById(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.font = `${fontSize}px ${fontFamily}`;\n\n    let text = document.getElementById(\"text\").value;\n    let lineWidth = document.getElementById(\"line-width\").valueAsNumber;\n    let breakWords = document.getElementById(\"break-words\").checked;\n    let wordSeparator = document.getElementById(\"word-separator\").value;\n    let wordSplitter = document.getElementById(\"word-splitter\").value;\n    let wrapAlgorithm = document.getElementById(\"wrap-algorithm\").value;\n    let penalties = new WasmPenalties(document.getElementById(\"nline-penalty\").valueAsNumber,\n                                      document.getElementById(\"overflow-penalty\").valueAsNumber,\n                                      document.getElementById(\"short-line-fraction\").valueAsNumber,\n                                      document.getElementById(\"short-last-line-penalty\").valueAsNumber,\n                                      document.getElementById(\"hyphen-penalty\").valueAsNumber);\n    let options = new WasmOptions(lineWidth, breakWords, wordSeparator, wordSplitter, wrapAlgorithm, penalties);\n    draw_wrapped_text(ctx, options, text, penalties);\n}\n\ndocument.getElementById(\"wrap-algorithm\").addEventListener(\"input\", (event) => {\n    let disablePenaltiesParams = (event.target.value == \"FirstFit\");\n    let rangeInputIds = [\"nline-penalty\",\n               \"overflow-penalty\",\n               \"short-line-fraction\",\n               \"short-last-line-penalty\",\n               \"hyphen-penalty\"];\n    rangeInputIds.forEach((rangeInputId) => {\n        let rangeInput = document.getElementById(rangeInputId);\n        let textInput = document.getElementById(`${rangeInputId}-text`);\n        rangeInput.disabled = disablePenaltiesParams;\n        textInput.disabled = disablePenaltiesParams;\n    });\n});\n\n\ndocument.querySelectorAll(\"input[type=range]\").forEach((rangeInput) => {\n    let textInput = document.getElementById(`${rangeInput.id}-text`);\n    textInput.min = rangeInput.min;\n    textInput.max = rangeInput.max;\n    textInput.value = rangeInput.value;\n\n    rangeInput.addEventListener(\"input\", (event) => {\n        textInput.value = rangeInput.valueAsNumber;\n    });\n    textInput.addEventListener(\"input\", (event) => {\n        rangeInput.value = textInput.valueAsNumber;\n    });\n});\n\ndocument.querySelectorAll(\"textarea, select, input\").forEach((elem) => {\n    elem.addEventListener(\"input\", redraw);\n});\n\nwindow.addEventListener(\"resize\", (event) => {\n    const X_OFFSET = 8;  // To accommodate the size of the slider knob.\n\n    let footer = document.getElementById(\"footer\");\n    let canvas = document.getElementById(\"canvas\");\n    let width = canvas.parentNode.clientWidth;\n\n    canvas.width = width;\n    canvas.height = footer.offsetTop - canvas.offsetTop;\n\n    let lineWidth = document.getElementById(\"line-width\");\n    let lineWidthText = document.getElementById(\"line-width-text\");\n    lineWidth.max = width - 2 * X_OFFSET;\n    lineWidthText.max = width - 2 * X_OFFSET;\n    lineWidth.style.width = `${width}px`;\n\n    redraw();\n});\n\nlet lineWidth = document.getElementById(\"line-width\");\nlet lineWidthText = document.getElementById(\"line-width-text\");\nlineWidthText.value = lineWidth.valueAsNumber;\nwindow.dispatchEvent(new Event('resize'));\n","import * as wasm from \"./textwrap_wasm_demo_bg.wasm\";\nexport * from \"./textwrap_wasm_demo_bg.js\";","import * as wasm from './textwrap_wasm_demo_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* @param {CanvasRenderingContext2D} ctx\n* @param {WasmOptions} options\n* @param {string} text\n*/\nexport function draw_wrapped_text(ctx, options, text) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(options, WasmOptions);\n        const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.draw_wrapped_text(retptr, addBorrowedObject(ctx), options.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n/**\n*/\nexport class WasmOptions {\n\n    static __wrap(ptr) {\n        const obj = Object.create(WasmOptions.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmoptions_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get width() {\n        const ret = wasm.__wbg_get_wasmoptions_width(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set width(arg0) {\n        wasm.__wbg_set_wasmoptions_width(this.ptr, arg0);\n    }\n    /**\n    * @returns {boolean}\n    */\n    get break_words() {\n        const ret = wasm.__wbg_get_wasmoptions_break_words(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {boolean} arg0\n    */\n    set break_words(arg0) {\n        wasm.__wbg_set_wasmoptions_break_words(this.ptr, arg0);\n    }\n    /**\n    * @returns {any}\n    */\n    get word_separator() {\n        const ret = wasm.__wbg_get_wasmoptions_word_separator(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {any} arg0\n    */\n    set word_separator(arg0) {\n        wasm.__wbg_set_wasmoptions_word_separator(this.ptr, addHeapObject(arg0));\n    }\n    /**\n    * @returns {any}\n    */\n    get word_splitter() {\n        const ret = wasm.__wbg_get_wasmoptions_word_splitter(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {any} arg0\n    */\n    set word_splitter(arg0) {\n        wasm.__wbg_set_wasmoptions_word_splitter(this.ptr, addHeapObject(arg0));\n    }\n    /**\n    * @returns {any}\n    */\n    get wrap_algorithm() {\n        const ret = wasm.__wbg_get_wasmoptions_wrap_algorithm(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {any} arg0\n    */\n    set wrap_algorithm(arg0) {\n        wasm.__wbg_set_wasmoptions_wrap_algorithm(this.ptr, addHeapObject(arg0));\n    }\n    /**\n    * @returns {WasmPenalties}\n    */\n    get penalties() {\n        const ret = wasm.__wbg_get_wasmoptions_penalties(this.ptr);\n        return WasmPenalties.__wrap(ret);\n    }\n    /**\n    * @param {WasmPenalties} arg0\n    */\n    set penalties(arg0) {\n        _assertClass(arg0, WasmPenalties);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_wasmoptions_penalties(this.ptr, ptr0);\n    }\n    /**\n    * @param {number} width\n    * @param {boolean} break_words\n    * @param {any} word_separator\n    * @param {any} word_splitter\n    * @param {any} wrap_algorithm\n    * @param {WasmPenalties} penalties\n    */\n    constructor(width, break_words, word_separator, word_splitter, wrap_algorithm, penalties) {\n        _assertClass(penalties, WasmPenalties);\n        var ptr0 = penalties.ptr;\n        penalties.ptr = 0;\n        const ret = wasm.wasmoptions_new(width, break_words, addHeapObject(word_separator), addHeapObject(word_splitter), addHeapObject(wrap_algorithm), ptr0);\n        return WasmOptions.__wrap(ret);\n    }\n}\n/**\n*/\nexport class WasmPenalties {\n\n    static __wrap(ptr) {\n        const obj = Object.create(WasmPenalties.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmpenalties_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get nline_penalty() {\n        const ret = wasm.__wbg_get_wasmpenalties_nline_penalty(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set nline_penalty(arg0) {\n        wasm.__wbg_set_wasmpenalties_nline_penalty(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get overflow_penalty() {\n        const ret = wasm.__wbg_get_wasmpenalties_overflow_penalty(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set overflow_penalty(arg0) {\n        wasm.__wbg_set_wasmpenalties_overflow_penalty(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get short_last_line_fraction() {\n        const ret = wasm.__wbg_get_wasmpenalties_short_last_line_fraction(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set short_last_line_fraction(arg0) {\n        wasm.__wbg_set_wasmpenalties_short_last_line_fraction(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get short_last_line_penalty() {\n        const ret = wasm.__wbg_get_wasmpenalties_short_last_line_penalty(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set short_last_line_penalty(arg0) {\n        wasm.__wbg_set_wasmpenalties_short_last_line_penalty(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get hyphen_penalty() {\n        const ret = wasm.__wbg_get_wasmpenalties_hyphen_penalty(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set hyphen_penalty(arg0) {\n        wasm.__wbg_set_wasmpenalties_hyphen_penalty(this.ptr, arg0);\n    }\n    /**\n    * @param {number} nline_penalty\n    * @param {number} overflow_penalty\n    * @param {number} short_last_line_fraction\n    * @param {number} short_last_line_penalty\n    * @param {number} hyphen_penalty\n    */\n    constructor(nline_penalty, overflow_penalty, short_last_line_fraction, short_last_line_penalty, hyphen_penalty) {\n        const ret = wasm.wasmpenalties_new(nline_penalty, overflow_penalty, short_last_line_fraction, short_last_line_penalty, hyphen_penalty);\n        return WasmPenalties.__wrap(ret);\n    }\n}\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_actualBoundingBoxAscent_263891fadd43361b(arg0) {\n    const ret = getObject(arg0).actualBoundingBoxAscent;\n    return ret;\n};\n\nexport function __wbg_actualBoundingBoxDescent_4b0b0ac59e164733(arg0) {\n    const ret = getObject(arg0).actualBoundingBoxDescent;\n    return ret;\n};\n\nexport function __wbg_new_abda76e883ba8a5f() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_658279fe44541cf6(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_f851667af71bcfc6(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbg_setstrokeStyle_899ea3720dae323b(arg0, arg1) {\n    getObject(arg0).strokeStyle = getObject(arg1);\n};\n\nexport function __wbg_setfont_f55835290596888e(arg0, arg1, arg2) {\n    getObject(arg0).font = getStringFromWasm0(arg1, arg2);\n};\n\nexport function __wbg_settextAlign_2ec9d955460e13ca(arg0, arg1, arg2) {\n    getObject(arg0).textAlign = getStringFromWasm0(arg1, arg2);\n};\n\nexport function __wbg_settextBaseline_d33235cd2782235c(arg0, arg1, arg2) {\n    getObject(arg0).textBaseline = getStringFromWasm0(arg1, arg2);\n};\n\nexport function __wbg_beginPath_4e91b7092d0d33d9(arg0) {\n    getObject(arg0).beginPath();\n};\n\nexport function __wbg_stroke_85dee7d87c4a6ead(arg0) {\n    getObject(arg0).stroke();\n};\n\nexport function __wbg_lineTo_dbe49320dd6e392a(arg0, arg1, arg2) {\n    getObject(arg0).lineTo(arg1, arg2);\n};\n\nexport function __wbg_moveTo_15a09390bee05586(arg0, arg1, arg2) {\n    getObject(arg0).moveTo(arg1, arg2);\n};\n\nexport function __wbg_restore_556d7c38c007b3fe(arg0) {\n    getObject(arg0).restore();\n};\n\nexport function __wbg_save_a9bb370fb49c5df7(arg0) {\n    getObject(arg0).save();\n};\n\nexport function __wbg_fillText_e5b1cef36b742bcc() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    getObject(arg0).fillText(getStringFromWasm0(arg1, arg2), arg3, arg4);\n}, arguments) };\n\nexport function __wbg_measureText_734acef1b5e2b3fd() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).measureText(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_width_87b8dcd7cafaeec1(arg0) {\n    const ret = getObject(arg0).width;\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"names":[],"sourceRoot":""}