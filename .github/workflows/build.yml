name: build

on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: '30 17 * * 5'  # Every Friday at 17:30 UTC

env:
  CARGO_TERM_COLOR: always
  NPM_CONFIG_COLOR: always
  FORCE_COLOR: 3
  RUSTFLAGS: -D warnings

jobs:

  ubuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - nightly
    env:
      RUSTC_WRAPPER: sccache
      CARGO_INCREMENTAL: 0  # To let sccache cache the compilation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install sccache
        run: |
          RELEASES=https://github.com/mozilla/sccache/releases/download
          VERSION=0.2.15
          FILE=sccache-v$VERSION-x86_64-unknown-linux-musl

          mkdir -p ~/.local/bin
          curl -L "$RELEASES/v$VERSION/$FILE.tar.gz" \
            | tar -xz \
                --directory ~/.local/bin \
                --strip-components 1 \
                $FILE/sccache
          chmod +x ~/.local/bin/sccache

      - name: Setup sccache cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ matrix.rust }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-sccache-${{ matrix.rust }}-
            ${{ runner.os }}-sccache-

      - name: Install ${{ matrix.rust }} Rust
        run: rustup default ${{ matrix.rust }}

      - name: Test with default features
        run: cargo test

      - name: Test without default features
        run: cargo test --no-default-features

      - name: Test with all features
        run: cargo test --all-features

      - name: Show sccache statistics
        run: sccache --show-stats

  windows:
    name: Build on Windows (stable)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Test with default features
        run: cargo test

  # This builds examples and benchmarks, which are not covered above.
  build-all:
    name: Build all targets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build all targets with default features
        run: cargo build --all-targets

      - name: Build all targets without default features
        run: cargo build --all-targets --no-default-features

      - name: Build all targets with all features
        run: cargo build --all-targets --all-features

  build-documentation:
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build documentation and check intra-doc links
        env:
          RUSTDOCFLAGS: --deny broken_intra_doc_links
        run: cargo doc --all-features --no-deps

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Clippy with default lints
        run: cargo clippy

      - name: Lint for left-over debug prints
        run: cargo clippy -- -D clippy::print_stdout -D clippy::print_stderr

  fuzz:
    name: Fuzz test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install nightly Rust
        run: rustup default nightly

      - name: Get latest cargo-fuzz version
        id: cargo-fuzz-version
        run: |
          VERSION=$(cargo search cargo-fuzz | grep cargo-fuzz | cut -d '"' -f 2)
          echo "::set-output name=version::$VERSION"

      - name: Cache cargo-fuzz
        id: cache
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin/cargo-fuzz
          key: cargo-fuzz-${{ steps.cargo-fuzz-version.outputs.version }}

      - name: Install cargo-fuzz
        if: steps.cache.outputs.cache-hit != 'true'
        run: cargo install cargo-fuzz

      - name: Cache fuzz corpus
        id: cache-fuzz-corpus
        uses: actions/cache@v2
        with:
          path: fuzz/corpus
          key: fuzz-corpus-${{ github.run_id }}
          restore-keys: |
            fuzz-corpus-

      - name: Build fuzz targets
        run: cargo fuzz build fill_first_fit

      - name: Fuzz test
        run: cargo fuzz run fill_first_fit -- -max_total_time=30

      - name: Minimize fuzz corpus
        run: cargo fuzz cmin fill_first_fit

  wasm-build:
    name: Build Wasm demo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build textwrap-wasm-demo
        run: wasm-pack build
        working-directory: examples/wasm

      - name: Install textwrap-wasm-demo-app dependencies
        run: npm install
        working-directory: examples/wasm/www

      - name: Bundle textwrap-wasm-demo-app
        run: npm run build
        working-directory: examples/wasm/www

      - name: Upload bundled textwrap-wasm-demo-app
        uses: actions/upload-artifact@v2
        with:
          name: textwrap-wasm-demo-app
          path: examples/wasm/www/dist

  wasm-deploy:
    name: Deploy Wasm demo
    needs: wasm-build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: Cleanup previous deployment
        run: rm *

      - name: Download bundled textwrap-wasm-demo-app
        uses: actions/download-artifact@v2
        with:
          name: textwrap-wasm-demo-app

      - name: Add and remove changed files
        id: git-add
        run: |
          git restore build-info.json
          git add --verbose --all
          if git diff --staged --quiet --exit-code; then
            echo "No changes found in textwrap-wasm-demo-app"
            echo '::set-output name=has-changes::false'
          else
            echo '::set-output name=has-changes::true'
          fi

      - name: Record build info
        if: steps.git-add.outputs.has-changes == 'true'
        run: |
          cat > build-info.json <<EOM
          {"date": "$(date --utc --iso-8601)", "commit": "$GITHUB_SHA"}
          EOM
          git add --verbose --all

      - name: Configure Git user
        if: steps.git-add.outputs.has-changes == 'true'
        run: |
          git config user.name "Martin Geisler"
          git config user.email "martin@geisler.net"

      - name: Commit textwrap-wasm-demo-app changes
        if: steps.git-add.outputs.has-changes == 'true'
        run: git commit -m "Update Wasm demo to ${GITHUB_SHA::7}"

      - name: Deploy textwrap-wasm-demo-app
        if: steps.git-add.outputs.has-changes == 'true'
        run: git push origin
